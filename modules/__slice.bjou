# __slice.bjou

module __slice

extern sprintf(char*, char*, ...) : int

type __bjou_slice$T {
    __data : T*
    __len  : u64

    proc create(src : T*, start : u64, len : u64) : __bjou_slice$T {
        return { __bjou_slice$T:
            .__data = src + start,
            .__len = len
        }
    }
}

\static_if { \abc{}
    proc __bjou_slice_subscript$T(
            _s     : T[] ref, # the slice
            _i     : u64,     # the index
            _loc_f : char*,   # call site file
            _loc_l : int,     # call site line
            _loc_c : int)     # call site character
            : T {

        if _i >= \__slice_len{_s}
        or _i < 0 {
            buff : char[1024]
            buff.sprintf("slice index out of bounds (index = %d, length = %d)\n    at %s :: %d :: %d",
                         _i, \__slice_len{_s}, _loc_f, _loc_l, _loc_c)
            \die{ buff }
        }

        return \__slice_data{_s}[_i]
    }
}
\static_if { not \abc{}
    proc __bjou_slice_subscript$T(_s : T[] ref, _i : u64) : T {
        return \__slice_data{_s}[_i]
    }
}

proc contains$T(slice : T[] ref, val : T) : bool {
    foreach t in slice
        if t == val
            return true
    return false
}

proc free$T(slice : T[] ref) {
    delete \__slice_data{slice}
}

# proc zip$(T, U)(a1 : T[], a2 : U[], out : (T, U)*) {
#     if |a1| != |a2|
#         \die{ "Can't zip containers of different lengths." }

#     for i := 0; i < |a1|; i += 1
#         out[i] = (unref(a1[i]), unref(a2[i]))
# }
