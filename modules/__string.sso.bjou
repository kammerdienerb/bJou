# __string.bjou

module __string

import "null.bjou"

# @libc
extern sprintf(char*, char*, ...) : int
extern sscanf(char*, char*, ...) : int
extern strstr(char*, char*) : char*
extern isspace(int) : int

proc cstrlen(s : char*) : u64 {
    len := 0u64

    while @s {
        s   += 1
        len += 1
    }

    return len
}

proc cstrdup(s : char*) : char* {
    len := cstrlen(s)

    len += 1 # for NULL char

    s' := new char[len]
    mcopy(s', s, len)

    return s'
}

proc cstrcmp(s1 : char*, s2 : char*) : int {
    while @s1
    and   @s1 == @s2 {
        s1 += 1
        s2 += 1
    }
    return @(s1 as u8*) - @(s2 as u8*)
}

proc cstrncmp(s1 : char*, s2 : char*, n : u64) : int {
    while n {
        n -= 1
        if @s1 != @s2 {
            return @(s1 as u8*) - @(s2 as u8*)
        }
        s1 += 1
        s2 += 1
    }
    return 0
}

proc cstrcat(dst : char*, src : char*) : char* {
    p := dst + cstrlen(dst)

    while @p = @src {
        p   += 1
        src += 1
    }

    return dst
}


type __string_short {
    const __MAX_CAP := 23

    __used : u8
    __data : char[23]
}

type __string_long {
    # NOTE: it is critical that __dynamic_array
    # has capacity as this first member.
    # DON'T CHANGE THE LAYOUT
    __data : char[...]
}

type string {
    _a : u64
    _b : u64
    _c : u64


    proc __inline__ __is_long(this) : bool {
        return (@((&(this._a)) as u8*)) band 0x01u8
    }

    proc __inline__ __as_short(this) : __string_short ref {
        return @((&this) as __string_short*)
    }
    proc __inline__ __as_long(this) : __string_long ref {
        return @((&this) as __string_long*)
    }

    proc __inline__ __short_used(this) : u64 {
        return (this.__as_short().__used) bshr 0x1u8
    }
    proc __inline__ __short_data(this) : char* {
        return this.__as_short().__data
    }

    proc __inline__ __long_data(this) : char[...] ref {
        return this.__as_long().__data
    }

    proc __inline__ __set_short_used(this, used : u8) {
        this.__as_short().__used = (used bshl 0x1u8)
    }

    proc __move_to_long(this) {
        _long_data := [...char]
        _long_data.set(
            [ this.__short_data(), 0:(this.__short_used() + 1) ]) # grab NULL
        this.__long_data() = _long_data
    }

    proc create() : string {
        # nice
        return { string: }
    }

    proc create(c_str : char*) : string {
        s := { string: }
        l := cstrlen(c_str) + 1 # count NULL

        if l <= __string_short.__MAX_CAP {
            s.__set_short_used(l - 1) # don't count NULL
            mcopy(s.__short_data(), c_str, l)
        } else {
            s_d := s.__long_data()
            s_d  = [...char] 
            s_d.set([c_str, 0:l])
        }

        return s
    }

    proc create(c_str : char*, n : u64) : string {
        s := { string: }

        if n == 0
            return s

        if c_str[n - 1] == '\0'
            return string.create(c_str)

        l := n + 1 # count NULL

        if l <= __string_short.__MAX_CAP {
            s.__set_short_used(l - 1) # don't count NULL
            mcopy(s.__short_data(), c_str, l - 1) # don't count NULL
            s.__short_data()[l - 1] = '\0'
        } else {
            s_d := s.__long_data()
            s_d  = [...char] 
            s_d.set([c_str, 0:n])
            s_d.push('\0')
        }

        return s
    }

    proc copy(this) : string {
        r := { string: }
        
        if this.__is_long() {
            r.__long_data() = this.__long_data().copy()
        } else {
            r = this
        }
        
        return r
    }

    proc set(this, c_str : char*) {
        l := cstrlen(c_str) + 1 # count NULL

        if l <= __string_short.__MAX_CAP {
            this.__set_short_used(l - 1) # don't count NULL
            mcopy(this.__short_data(), c_str, l)
        } else {
            s_d := this.__long_data()
            s_d.set([c_str, 0:l])
        }
    }

    proc set(this, s : string ref) {
        if s.__is_long() {
            this.__long_data().set(s.__long_data().as_slice())
        } else {
            this.free()
            this = s
        }
    }

    proc free(this) {
        if this.__is_long() {
            this.__long_data().free()
        }
    }

    proc len(this) : u64 {
        r := 0u64
        if this.__is_long() {
            r = |this.__long_data()|
            if r > 0
                r -= 1 # don't count NULL 
        } else {
            r = this.__short_used()
        }
       
        return r
    }

    proc c_str(this) : char* {
        if this.__is_long() {
            return this.__long_data().data()
        }

        return this.__short_data()
    }

    proc as_slice(this) : char[] {
        if this.__is_long() {
            return this.__long_data().as_slice()
        }
        return [ this.c_str(), 0:this.__short_used() ]
    }
    
    proc append(this, ch : char) {
        if this.__is_long() {
            _long_data := this.__long_data()
            _long_data.back() = ch
            _long_data.push('\0')
        } else {
            _u := this.__short_used()
            if _u + 1 == __string_short.__MAX_CAP { # count NULL
                this.__move_to_long()
                _long_data := this.__long_data()
                _long_data.back() = ch
                _long_data.push('\0')
            } else {
                this.__short_data()[_u] = ch
                this.__set_short_used(_u + 1)
            }
        }
    }

    proc append(this, c_str : char*) {
        s_slice := [c_str, 0:cstrlen(c_str)]
        foreach ch in s_slice
            this.append(ch)
    }

    proc append(this, s : string) {
        _l := s.len()
        _p := s.c_str()
        for i := 0; i < _l; i += 1
            this.append(_p[i])
    }

    proc pop(this) {
        if this.__is_long() {
            _long_data := this.__long_data()
            _long_data.pop()
            _long_data.back() = '\0'
        } else {
            _u := this.__short_used()
            if _u == 0
                return
            this.__set_short_used(_u - 1)
            this.__short_data()[_u] = '\0'
        }
    }
    
    proc back(this) : char ref {
        if this.len() == 0
            \die{ "called back() on an empty string" }
        return this.c_str()[this.len() - 1]
    }

    proc clear(this) {
        if this.__is_long() {
            _long_data := this.__long_data()
            _long_data[0] = '\0'
            _long_data.clear()
        } else {
            this = { string: }
        }
    }

    proc substr(this, start : u64) : string {
        s := string.create()
        l := this.len()
        for i := start; i < l; i += 1 {
            s.append(this.c_str()[i])
        }
        return s
    }
    
    proc substr(this, start : u64, take : u64) : string {
        s := string.create()
        for i := 0u64; i < take; i += 1 {
            s.append(this.c_str()[start + i])
        }
        return s
    }

    proc find(this, c : char) : i64 {
        l := this.len()
        for i := 0i64; i < l; i += 1 {
            if this.c_str()[i] == c {
                return i
            }
        }
        return -1
    }

    proc find(this, needle : char*) : i64 {
        haystack := this.c_str()
        search   := strstr(haystack, needle)
        if search.null::isnull()
            return -1
        return ptrdiff(search as void*, haystack as void*)
    }

    proc find(this, needle : string) : i64
        return this.find(needle.c_str())

    proc findlast(this, c : char) : i64 {
        for i := this.len() - 1; i >= 0; i -= 1
            if this.c_str()[i] == c
                return i
        return -1
    }

    proc findlast(this, needle : char*) : i64 {
        haystack := this.c_str()
        running  := haystack

        result := null::NULL as char*

        if @needle == '\0'
            return 0

        while true {
            search := strstr(running, needle)
            if search.null::isnull()
                break
            result  = search
            running = search + 1
        }

        if result.null::isnull()
            return -1

        return ptrdiff(result as void*, haystack as void*)
    }

    proc count(this, ch : char) : u64 {
        if this.__is_long()
            return this.__long_data().count(ch)

        sum := 0u64
        _l  := this.len()
        for i := 0; i < _l; i += 1 {
            if this.c_str()[i] == ch
                sum += 1
        }
        return sum
    }
}

\op { "[]" proc __string_subscript(s : string ref, index : u64) : char ref {
    if s.__is_long() {
        # get bounds checking
        return s.__long_data()[index]
    }
    return s.c_str()[index]
}}

proc str() : string
    return string.create()

proc str(c : char) : string {
    return string.create(&c, 1)
}

proc str(c_str : char*) : string
    return string.create(c_str)

proc str(c_str : char*, n : u64) : string
    return string.create(c_str, n)

proc str(u : u64) : string {
    buff : char[128]
    sprintf(buff, "%llu", u)
    return string.create(buff)
}

proc str(i : i64) : string {
    buff : char[128]
    sprintf(buff, "%lld", i)
    return string.create(buff)
}

proc str(f : f32) : string {
    buff : char[128]
    sprintf(buff, "%f", f)
    return string.create(buff)
}

proc str(f : f64) : string {
    buff : char[128]
    sprintf(buff, "%f", f)
    return string.create(buff)
}

proc str(f : f64, dec : u32) : string {
    buff : char[128]
    sprintf(buff, "%.*f", dec, f)
    return string.create(buff)
}

proc equal(s1 : string ref, s2 : string ref) : bool {
    return cstrcmp(s1.c_str(), s2.c_str()) == 0
}

\op { "==" proc __string_equ(s1 : string ref, s2 : string ref) : bool {
    return equal(s1, s2)
}}

# @note: These concat() functions are inefficient.

proc concat(s1 : string, s2 : char*) : string {
    s1.append(s2)
    return s1
}

proc concat(s1 : string, s2 : string) : string {
    s1.append(s2)
    return s1
}

proc concat(s1 : string,
            s2 : string,
            s3 : string) : string {
    s1.append(s2)
    s1.append(s3)
    return s1
}

proc concat(s1 : string,
            s2 : string,
            s3 : string,
            s4 : string) : string {
    s1.append(s2)
    s1.append(s3)
    s1.append(s4)
    return s1
}

proc concat(strs : string[...] ref) : string {
    out := str()
    foreach ref s in strs {
        out.append(s)
        s.free()
    }
    return out
}

\op { "+" proc __string_plus(s1 : string, s2 : string) : string {
    return concat(s1, s2)
}}

proc ljust(s : string ref, width : int) {
    l := s.len()

    if l > width
        \die{ "string longer than justify width" }
    if l == width
        return

    n_spc := width - l
    spc   := str()

    for i := 0; i < n_spc; i += 1
        spc.append(' ')

    s = concat(s, spc)
}

proc rjust(s : string ref, width : int) {
    l := s.len()

    if l > width
        \die{ "string longer than justify width" }
    if l == width
        return

    n_spc := width - l
    spc   := str()

    for i := 0; i < n_spc; i += 1
        spc.append(' ')

    s = concat(spc, s)
}

proc ltrim(s : string ref) {
    dup := cstrdup(s.c_str())
    ptr := dup
    while isspace(@ptr)    ptr += 1
    s.free()
    s = str(ptr)
    delete dup
}
 
proc rtrim(s : string ref) {
    dup := cstrdup(s.c_str())
    ptr := dup + s.len() - 1 

    while (isspace(@ptr) or not @ptr) and ptr >= dup 
        ptr -= 1
    ptr += 1
    @ptr = '\0'
    
    s.free()
    s = str(dup)
    delete dup
}
 
proc trim(s : string ref) {
    s.ltrim()
    s.rtrim()
}

proc to$T(s : string ref) : T {
    \static_if{ \typeisint{T}
        i := 0i64
        sscanf(s.c_str(), "%lld", &i)
        return i }
    \static_if{ \typeisfloat{T}
        f := 0.0
        sscanf(s.c_str(), "%f", &f)
        return f }
}
