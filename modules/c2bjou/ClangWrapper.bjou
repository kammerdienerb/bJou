# ClangWrapper.bjou

module c2bjou_ClangWrapper

import "clang.bjou"
using clang
using c2bjou_visitors

type ClangWrapper {
    index    : CXIndex*
    tu       : CXTranslationUnit*
    tokens   : CXToken*
    n_tokens : u32

    proc create() : ClangWrapper {
        return { ClangWrapper:
            .index = clang.createIndex(0, 0)
        }
    }

    proc parseTU(this, fname : char*, cmd_line_args : char*[...] ref) {
        this.tu = clang.parseTranslationUnit(
            this.index,
            fname,
            cmd_line_args.data(), |cmd_line_args|,
            _nullptr() as CXUnsavedFile*, 0,
            0) # CXTranslationUnit_DetailedPreprocessingRecord)

        if this.tu.isnull()
            \die{ "c2bjou: bad translation unit" }
        
        ndiags := clang.getNumDiagnostics(this.tu) as int
        errors := false
        for i := 0; i < ndiags; i += 1 {
            diag := clang.getDiagnostic(this.tu, i)
            if clang.getDiagnosticSeverity(diag) >= CXDiagnostic_Error
                errors = true
            cxstr := clang.formatDiagnostic(diag, clang.defaultDiagnosticDisplayOptions())
            str := clang.getCString(cxstr)
            print "%", str
            clang.disposeString(cxstr)
        }
        if errors \die{ "c2bjou: there were libclang errors" }
    }

    proc traverse(this,
                  root : CXCursor,
                  visitor : visitor_t,
                  data : CXClientData*) {
        clang.visitChildren(root, visitor, data)
    }

    proc traverseTU(this,
                    visitor : visitor_t,
                    data : CXClientData*) {      

        cursor := clang.getTranslationUnitCursor(this.tu)
        this.traverse(cursor, visitor, data)
    }

    proc getCursorName(cursor : CXCursor) : char* {
        name_cxstr := clang.getCursorSpelling(cursor)
        return clang.getCString(name_cxstr)
    }

    proc getCursorTokens(this, cursor : CXCursor) : CXToken[] {
        if not this.tokens.isnull()
            clang.disposeTokens(this.tu, this.tokens, this.n_tokens)
   
        sr := clang.getCursorExtent(cursor)

        clang.tokenize(this.tu, sr, &this.tokens, &this.n_tokens)

        return [this.tokens, 0:this.n_tokens] 
    }
}
