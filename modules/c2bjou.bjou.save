# c2bjou
# source to source translator from C to bJou
# uses libclang

module c2bjou

extern sscanf(char*, char*, ...) : int
extern sprintf(char*, char*, ...) : int
extern strcmp(char*, char*) : int
extern strlen(char*) : u64
extern strstr(char*, char*) : char*
extern dirname(char*) : char*

\ct {
const PRINT_AST := false

import "null.bjou"
using null
import "dict.bjou"
using dict

import "clang.bjou"
using clang
import "clangextras.bjou"
using clangextras
import "c2bjou/ClangWrapper.bjou"
using c2bjou_ClangWrapper 
import "c2bjou/visitors.bjou"
using c2bjou_visitors

import "compiler.bjou"
using compiler

proc include(fname : char*) {# : c2bJou {
    init_clang()
    init_clangextras()

    v_str := clang.getCString(clang.getClangVersion())

    maj := 0
    med := 0
    min := 0

    v_str.sscanf("clang version %d.%d.%d", &maj, &med, &min)

    inc_buff : char[128]

    # dirname() is weird.. can't take a global string as an argument
    # because it modifies its argument. We do it this way.
    _path := str(clang._path)
    path  := str(dirname(_path.c_str()))
    _path.free()

    inc_buff.sprintf("-I%s/clang/%d.%d.%d/include", path.c_str(), maj, med, min)
    path.free()

    cmd_line_args := [...char*]
    cmd_line_args.push(inc_buff)

    cw := ClangWrapper.create()
    translator := c2bJou.create(cw)

    translator.cw.parseTU(fname, cmd_line_args)

    cmd_line_args.free()

    translator.cw.traverseTU(dispatch, (&translator) as CXClientData*)

    bjou_dump(translator.created.data(), |translator.created|, "out.bjou", false)

    # run passes on translated nodes
    gs := bjou_getGlobalScope()

    foreach node in translator.created {
        bjou_appendNode(node)
        bjou_setGlobalNodeRP(node)
        
        cxt   := bjou_getContext(node)
        fpath := str(bjou_contextGetFileName(cxt))

        inc_idx := fpath.find("include")
        if inc_idx != -1 {
            fpath' := str(fpath.c_str() + inc_idx)
            fpath.free()
            fpath = fpath'
        }

        slash_idx := fpath.find('/') 

        # print "%", fpath.c_str() + slash_idx + 1

        fpath.free()
    }
    foreach node in translator.structs
        bjou_preDeclare(node, gs)
    foreach node in translator.created
        bjou_addSymbols(node, gs)
    bjou_runTypeCompletion()
    foreach node in translator.created
        bjou_analyze(node)

    # return translator
}

type AnonDecl {
    addr : void*
    decl : ASTNode*

    proc create(addr : void*, decl : ASTNode*) : AnonDecl {
        return { AnonDecl:
            .addr = addr,
            .decl = decl
        }
    }
}

type c2bJou {
    cw              : ClangWrapper ref
    visitor_table   : visitor_t[CXCursor_END_]
    indent          : int
    types           : dict$(CXType*, ASTNode*)
    created         : ASTNode*[...]
    inlineTypeDecls : ASTNode*[...]
    last_anon_decl  : string
    anon_decls      : AnonDecl[...]
    structs         : ASTNode*[...]

    proc create(cw : ClangWrapper ref) : c2bJou {
        c := { c2bJou:
            .cw              = cw,
            .indent          = 0,
            .types           = dict$(CXType*, ASTNode*).create(),
            .created         = [...ASTNode*],
            .inlineTypeDecls = [...ASTNode*],
            .last_anon_decl  = str(), 
            .anon_decls      = [...AnonDecl],
            .structs         = [...ASTNode*]
        }

        init_visitor_table(c.visitor_table)

        return c
    }

    proc findAnonTyDecl(this, addr : void*) : ASTNode* {
        foreach ref d in this.anon_decls
            if addr == d.addr
                return d.decl
        return nullptr$ASTNode()
    }

    proc getOrAddAnonTyDecl(this, cx_t : CXType, name : char*) : ASTNode* {
        cursor := clang.getTypeDeclaration(cx_t)
        addr   := cursor.data[0]

        search := this.findAnonTyDecl(addr)
        if not search.isnull()
            return search

        if name.isnull()
            \die{ "anon decl not found, but no name provided" }

        decl := declFromName(name)
        this.anon_decls.push(AnonDecl.create(addr, decl))

        return decl
    }
}
}
