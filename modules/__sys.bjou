# __sys.bjou
# This file was generated by gen_sys.
# system calls

module __sys

import "os.bjou"

extern nolibc_syscall(i64, i32, ...) : i32

\static_if{ os::OS != os::MACOS
    const SYS_NR_MOD := 0x0 }
\static_if{ os::OS == os::MACOS
    const SYS_NR_MOD := 0x2000000 }

type fd_t        = int
type mode_t      = u16
type time_t      = i64
type suseconds_t = i32

type timeval {
    tv_sec  : time_t
    tv_usec : suseconds_t
}
type timezone {
    tz_minuteswest : i32
    tz_dsttime     : i32
}
type timespec {
    tv_sec  : time_t
    tv_nsec : i64
}
proc time(t_p : time_t*) : time_t {
    tv := { timeval: }
    s  := gettimeofday(&tv, NULL as timezone*)
    if not t_p.isnull()    { @t_p = tv.tv_sec }
    return tv.tv_sec
}
proc sleep(s : u32) {
    elapsed := 0u32
    tv_beg := { timeval: }
    tv_now := { timeval: }
    gettimeofday(&tv_beg, NULL as timezone*)
    while elapsed < s {
        gettimeofday(&tv_now, NULL as timezone*)
        elapsed = tv_now.tv_sec - tv_beg.tv_sec
    }
}
proc usleep(u : u64) {
    elapsed := 0u64
    tv_beg := { timeval: }
    tv_now := { timeval: }
    gettimeofday(&tv_beg, NULL as timezone*)
    while elapsed < u {
        gettimeofday(&tv_now, NULL as timezone*)
        elapsed = ((tv_now.tv_sec * 1000000) + tv_now.tv_usec) - ((tv_beg.tv_sec * 1000000) + tv_beg.tv_usec)
    }
}

type rusage {
    bytes : u8[144]
    proc ru_maxrss(this) : i64 {
        return @(((&(this.bytes[32])) as void*) as i64*)
    }
}


const SYS_write := SYS_NR_MOD + 1
const SYS_read := SYS_NR_MOD + 0
const SYS_open := SYS_NR_MOD + 2
const SYS_close := SYS_NR_MOD + 3
const SYS_exit := SYS_NR_MOD + 60
const SYS_exit_group := SYS_NR_MOD + 231
const SYS_lseek := SYS_NR_MOD + 8
const SYS_access := SYS_NR_MOD + 21
const SYS_getpid := SYS_NR_MOD + 39
const SYS_gettimeofday := SYS_NR_MOD + 96
const SYS_getrusage := SYS_NR_MOD + 98
const S_IRWXU := 448
const S_IRUSR := 256
const S_IWUSR := 128
const S_IXUSR := 64
const S_IRWXG := 56
const S_IRGRP := 32
const S_IWGRP := 16
const S_IXGRP := 8
const S_IRWXO := 7
const S_IROTH := 4
const S_IWOTH := 2
const S_IXOTH := 1
const O_RDONLY := 0
const O_WRONLY := 1
const O_RDWR := 2
const O_APPEND := 1024
const O_CREAT := 64
const O_TRUNC := 512
const O_EXCL := 128
const SEEK_SET := 0
const SEEK_CUR := 1
const SEEK_END := 2
const F_OK := 0
const SIGHUP := 1
const SIGINT := 2
const SIGQUIT := 3
const SIGILL := 4
const SIGTRAP := 5
const SIGABRT := 6
const SIGPOLL := 29
const SIGIOT := 6
const SIGFPE := 8
const SIGKILL := 9
const SIGBUS := 7
const SIGSEGV := 11
const SIGSYS := 31
const SIGPIPE := 13
const SIGALRM := 14
const SIGTERM := 15
const SIGURG := 23
const SIGSTOP := 19
const SIGTSTP := 20
const SIGCONT := 18
const SIGCHLD := 17
const SIGTTIN := 21
const SIGTTOU := 22
const SIGIO := 29
const SIGXCPU := 24
const SIGXFSZ := 25
const SIGVTALRM := 26
const SIGPROF := 27
const SIGWINCH := 28
const SIGUSR1 := 10
const SIGUSR2 := 12
const _SC_NPROCESSORS_ONLN := 84

proc write(fd : i32, buf : void*, nbyte : u64) : i64
    return nolibc_syscall(SYS_write, 3, fd, buf, nbyte)

proc read(fd : i32, buf : void*, nbyte : u64) : i64
    return nolibc_syscall(SYS_read, 3, fd, buf, nbyte)

proc open(path: char*, oflag : int) : i64
    return nolibc_syscall(SYS_open, 2, path, oflag)

proc open(path: char*, oflag : int, mode : mode_t) : i64
    return nolibc_syscall(SYS_open, 3, path, oflag, mode)

proc close(fd : int) : i64
    return nolibc_syscall(SYS_close, 1, fd)

proc exit(status : int) : i64
    return nolibc_syscall(SYS_exit, 1, status)

proc exit_group(status : int) : i64
    return nolibc_syscall(SYS_exit_group, 1, status)

proc lseek(fd : int, offset : u64, whence : int) : u64
    return nolibc_syscall(SYS_lseek, 3, fd, offset, whence)

proc access(path : char*, mode : int) : i64
    return nolibc_syscall(SYS_access, 2, path, mode)

proc getpid() : i64
    return nolibc_syscall(SYS_getpid, 0)

proc gettimeofday(tv : timeval*, tz : timezone*) : i64
    return nolibc_syscall(SYS_gettimeofday, 2, tv, tz)

proc getrusage(who : int, usage : rusage*) : i64
    return nolibc_syscall(SYS_getrusage, 2, who, usage)


extern sysconf(int) : i64

