# build.bjou
# build system via a bJou compile-time metaprogram

module build \ct {

import "compiler.bjou"
import "io.bjou"

# Only run the front end for build.
# The compilation we spawn will (maybe) run through to the back end.
\front{ true }

extern mkdir(char*, u16) : int
const MODE_0777 := 511

type BuildOptions {
    build_dir : char*

    ################## cmd line args
    verbose             : bool
    front               : bool
    time                : bool
    symbols             : bool
    noparallel          : bool
    opt                 : bool
    noabc               : bool
    mod                 : bool
    nopreload           : bool
    lld                 : bool
    c                   : bool
    emitllvm            : bool
    module_search_paths : char*[...]
    output_name         : char*
    targettriple        : char*
    march               : char*
    mfeat               : char*
    link                : char*[...]
    files               : char*[...]
    ################################

    proc create() : BuildOptions
        return { BuildOptions:
            .build_dir           = "build",
            .module_search_paths = [...char*],
            .link                = [...char*],
            .files               = [...char*]
        }

    proc prepare(this) {
        print "preparing.."
        mkdir(this.build_dir, MODE_0777)
        buff : char[4096]
        buff[0] = 0
        cstrcat(buff, this.build_dir)
        cstrcat(buff, "/")
        cstrcat(buff, this.output_name)
        this.output_name = buff
    }
}


proc build(options : BuildOptions ref) {
    if |options.files| == 0
        \die{ "no files provided!" }

    cleanup_output_name := false
    o                   := NULL as char*

    if options.output_name == NULL as char* {
        o = cstrdup(options.files[0])
        cleanup_output_name = true
        s := str(o)
        idx := s.findlast('.')
        s.free()
        if idx >= 0 {
            o[idx] = '\0'
        }
        options.output_name = o
    }

    options.prepare()

    print "building % for bJou version %", options.output_name, bjou_getVersionString()
    foreach f in options.files
        print "  ->%", f

    bjou_StartDefaultCompilation(
        options.verbose,
        options.front,
        options.time,
        options.symbols,
        options.noparallel,
        options.opt,
        options.noabc,
        options.mod,
        options.nopreload,
        options.lld,
        options.c,
        options.emitllvm,
        options.module_search_paths.data(),
        |options.module_search_paths|,
        options.output_name,
        options.targettriple,
        options.march,
        options.mfeat,
        options.link.data(),
        |options.link|,
        options.files.data(),
        |options.files|)

    if cleanup_output_name    delete o

    print "done"
}

type DefsFile {
    f : io::file

    proc create(path : char*, name : char*) : DefsFile {
        f := io::file.open(path, io::file.WRITE)
        if not f.good()    \die{ "could not open defs file" } 

        df := { DefsFile: .f = f }
        
        comment := concat(str("# "), str(path), str(" -- defs file generated by build.bjou\n\n"))
        mod     := concat(str("module "), str(name), str("\n\n"))

        df.f.write(comment)
        df.f.write(mod)

        mod.free()
        comment.free()

        return df
    }

    proc _add_def(this, name : char*, val : char*) {
        s := concat(str("const "), str(name), str(" := "), str(val))
        s  = concat(s, str("\n"))
        this.f.write(s)
        s.free()
    }

    proc add_def(this, name : char*, val : char*) {
        s := concat(str("\""), str(val), str("\""))
        this._add_def(name, s.c_str())
        s.free()
    }

    proc add_def(this, name : char*, val : i64) {
        s := str(val)
        this._add_def(name, s.c_str())
        s.free()
    }
    
    proc add_def(this, name : char*, val : f64) {
        s := str(val)
        this._add_def(name, s.c_str())
        s.free()
    }

    proc add_def_code(this, name : char*, val : char*) {
        this._add_def(name, val)
    }

    proc close(this) { this.f.close() }
}

}
