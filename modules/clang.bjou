# clang.bjou
# bJou interface to libclang
# written for c2bjou

module clang

import "dlfcn.bjou"
import "null.bjou"

# global libclang object
clang := { libclang: }

# proc init_clang(path : char*)
#     clang = libclang.create(path)
proc init_clang()
    clang = libclang.create(libclang_path)

type CXString {
    data          : void*
    private_flags : u32
}

abstract type CXIndex           { }
abstract type CXTargetInfo      { }
abstract type CXTranslationUnit { }
abstract type CXClientData      { }

type CXUnsavedFile {
    Filename : char*
    Contents : char*
    Length   : u64 
}

type CXVersion {
    Major    : i32
    Minor    : i32
    Subminor : i32
}

abstract type CXFile { }

type CXFileUniqueID {
    data : u64[3]    
}

type CXSourceLocation {
    ptr_data : void*[2]
    int_data : u32
}

type CXSourceRange {
    ptr_data       : void*[2]
    begin_int_data : u32
    end_int_data   : u32
}

type CXSourceRangeList {
    count  : u32
    ranges : CXSourceRange*
}

abstract type CXDiagnostic    { }
abstract type CXDiagnosticSet { }

type CXTUResourceUsageEntry {
    kind   : u32 # CXTUResourceUsageKind
    amount : u64
}

type CXTUResourceUsage {
    data       : void*
    numEntries : u32
    entries    : CXTUResourceUsageEntry*
}

type CXCursor {
    kind  : u32
    xdata : i32
    data  : void*[3]
}

const CXCursor_UnexposedDecl                 := 1
const CXCursor_StructDecl                    := 2
const CXCursor_UnionDecl                     := 3
const CXCursor_ClassDecl                     := 4
const CXCursor_EnumDecl                      := 5
const CXCursor_FieldDecl                     := 6
const CXCursor_EnumConstantDecl              := 7
const CXCursor_FunctionDecl                  := 8
const CXCursor_VarDecl                       := 9
const CXCursor_ParmDecl                      := 10
const CXCursor_ObjCInterfaceDecl             := 11
const CXCursor_ObjCCategoryDecl              := 12
const CXCursor_ObjCProtocolDecl              := 13
const CXCursor_ObjCPropertyDecl              := 14
const CXCursor_ObjCIvarDecl                  := 15
const CXCursor_ObjCInstanceMethodDecl        := 16
const CXCursor_ObjCClassMethodDecl           := 17
const CXCursor_ObjCImplementationDecl        := 18
const CXCursor_ObjCCategoryImplDecl          := 19
const CXCursor_TypedefDecl                   := 20
const CXCursor_CXXMethod                     := 21
const CXCursor_Namespace                     := 22
const CXCursor_LinkageSpec                   := 23
const CXCursor_Constructor                   := 24
const CXCursor_Destructor                    := 25
const CXCursor_ConversionFunction            := 26
const CXCursor_TemplateTypeParameter         := 27
const CXCursor_NonTypeTemplateParameter      := 28
const CXCursor_TemplateTemplateParameter     := 29
const CXCursor_FunctionTemplate              := 30
const CXCursor_ClassTemplate                 := 31
const CXCursor_ClassTemplatePartialSpecialization := 32
const CXCursor_NamespaceAlias                := 33
const CXCursor_UsingDirective                := 34
const CXCursor_UsingDeclaration              := 35
const CXCursor_TypeAliasDecl                 := 36
const CXCursor_ObjCSynthesizeDecl            := 37
const CXCursor_ObjCDynamicDecl               := 38
const CXCursor_CXXAccessSpecifier            := 39
const CXCursor_FirstDecl                     := CXCursor_UnexposedDecl
const CXCursor_LastDecl                      := CXCursor_CXXAccessSpecifier
const CXCursor_ObjCSuperClassRef             := 40
const CXCursor_ObjCProtocolRef               := 41
const CXCursor_ObjCClassRef                  := 42
const CXCursor_TypeRef                       := 43
const CXCursor_CXXBaseSpecifier              := 44
const CXCursor_TemplateRef                   := 45
const CXCursor_NamespaceRef                  := 46
const CXCursor_MemberRef                     := 47
const CXCursor_LabelRef                      := 48
const CXCursor_OverloadedDeclRef             := 49
const CXCursor_VariableRef                   := 50
const CXCursor_LastRef                       := CXCursor_VariableRef
const CXCursor_FirstInvalid                  := 70
const CXCursor_InvalidFile                   := 70
const CXCursor_NoDeclFound                   := 71
const CXCursor_NotImplemented                := 72
const CXCursor_InvalidCode                   := 73
const CXCursor_LastInvalid                   := CXCursor_InvalidCode
const CXCursor_FirstExpr                     := 100
const CXCursor_UnexposedExpr                 := 100
const CXCursor_DeclRefExpr                   := 101
const CXCursor_MemberRefExpr                 := 102
const CXCursor_CallExpr                      := 103
const CXCursor_ObjCMessageExpr               := 104
const CXCursor_BlockExpr                     := 105
const CXCursor_IntegerLiteral                := 106
const CXCursor_FloatingLiteral               := 107
const CXCursor_ImaginaryLiteral              := 108
const CXCursor_StringLiteral                 := 109
const CXCursor_CharacterLiteral              := 110
const CXCursor_ParenExpr                     := 111
const CXCursor_UnaryOperator                 := 112
const CXCursor_ArraySubscriptExpr            := 113
const CXCursor_BinaryOperator                := 114
const CXCursor_CompoundAssignOperator        := 115
const CXCursor_ConditionalOperator           := 116
const CXCursor_CStyleCastExpr                := 117
const CXCursor_CompoundLiteralExpr           := 118
const CXCursor_InitListExpr                  := 119
const CXCursor_AddrLabelExpr                 := 120
const CXCursor_StmtExpr                      := 121
const CXCursor_GenericSelectionExpr          := 122
const CXCursor_GNUNullExpr                   := 123
const CXCursor_CXXStaticCastExpr             := 124
const CXCursor_CXXDynamicCastExpr            := 125
const CXCursor_CXXReinterpretCastExpr        := 126
const CXCursor_CXXConstCastExpr              := 127
const CXCursor_CXXFunctionalCastExpr         := 128
const CXCursor_CXXTypeidExpr                 := 129
const CXCursor_CXXBoolLiteralExpr            := 130
const CXCursor_CXXNullPtrLiteralExpr         := 131
const CXCursor_CXXThisExpr                   := 132
const CXCursor_CXXThrowExpr                  := 133
const CXCursor_CXXNewExpr                    := 134
const CXCursor_CXXDeleteExpr                 := 135
const CXCursor_UnaryExpr                     := 136
const CXCursor_ObjCStringLiteral             := 137
const CXCursor_ObjCEncodeExpr                := 138
const CXCursor_ObjCSelectorExpr              := 139
const CXCursor_ObjCProtocolExpr              := 140
const CXCursor_ObjCBridgedCastExpr           := 141
const CXCursor_PackExpansionExpr             := 142
const CXCursor_SizeOfPackExpr                := 143
const CXCursor_LambdaExpr                    := 144
const CXCursor_ObjCBoolLiteralExpr           := 145
const CXCursor_ObjCSelfExpr                  := 146
const CXCursor_OMPArraySectionExpr           := 147
const CXCursor_ObjCAvailabilityCheckExpr     := 148
const CXCursor_LastExpr                      := CXCursor_ObjCAvailabilityCheckExpr
const CXCursor_FirstStmt                     := 200
const CXCursor_UnexposedStmt                 := 200
const CXCursor_LabelStmt                     := 201
const CXCursor_CompoundStmt                  := 202
const CXCursor_CaseStmt                      := 203
const CXCursor_DefaultStmt                   := 204
const CXCursor_IfStmt                        := 205
const CXCursor_SwitchStmt                    := 206
const CXCursor_WhileStmt                     := 207
const CXCursor_DoStmt                        := 208
const CXCursor_ForStmt                       := 209
const CXCursor_GotoStmt                      := 210
const CXCursor_IndirectGotoStmt              := 211
const CXCursor_ContinueStmt                  := 212
const CXCursor_BreakStmt                     := 213
const CXCursor_ReturnStmt                    := 214
const CXCursor_GCCAsmStmt                    := 215
const CXCursor_AsmStmt                       := CXCursor_GCCAsmStmt
const CXCursor_ObjCAtTryStmt                 := 216
const CXCursor_ObjCAtCatchStmt               := 217
const CXCursor_ObjCAtFinallyStmt             := 218
const CXCursor_ObjCAtThrowStmt               := 219
const CXCursor_ObjCAtSynchronizedStmt        := 220
const CXCursor_ObjCAutoreleasePoolStmt       := 221
const CXCursor_ObjCForCollectionStmt         := 222
const CXCursor_CXXCatchStmt                  := 223
const CXCursor_CXXTryStmt                    := 224
const CXCursor_CXXForRangeStmt               := 225
const CXCursor_SEHTryStmt                    := 226
const CXCursor_SEHExceptStmt                 := 227
const CXCursor_SEHFinallyStmt                := 228
const CXCursor_MSAsmStmt                     := 229
const CXCursor_NullStmt                      := 230
const CXCursor_DeclStmt                      := 231
const CXCursor_OMPParallelDirective          := 232
const CXCursor_OMPSimdDirective              := 233
const CXCursor_OMPForDirective               := 234
const CXCursor_OMPSectionsDirective          := 235
const CXCursor_OMPSectionDirective           := 236
const CXCursor_OMPSingleDirective            := 237
const CXCursor_OMPParallelForDirective       := 238
const CXCursor_OMPParallelSectionsDirective  := 239
const CXCursor_OMPTaskDirective              := 240
const CXCursor_OMPMasterDirective            := 241
const CXCursor_OMPCriticalDirective          := 242
const CXCursor_OMPTaskyieldDirective         := 243
const CXCursor_OMPBarrierDirective           := 244
const CXCursor_OMPTaskwaitDirective          := 245
const CXCursor_OMPFlushDirective             := 246
const CXCursor_SEHLeaveStmt                  := 247
const CXCursor_OMPOrderedDirective           := 248
const CXCursor_OMPAtomicDirective            := 249
const CXCursor_OMPForSimdDirective           := 250
const CXCursor_OMPParallelForSimdDirective   := 251
const CXCursor_OMPTargetDirective            := 252
const CXCursor_OMPTeamsDirective             := 253
const CXCursor_OMPTaskgroupDirective         := 254
const CXCursor_OMPCancellationPointDirective := 255
const CXCursor_OMPCancelDirective            := 256
const CXCursor_OMPTargetDataDirective        := 257
const CXCursor_OMPTaskLoopDirective          := 258
const CXCursor_OMPTaskLoopSimdDirective      := 259
const CXCursor_OMPDistributeDirective        := 260
const CXCursor_OMPTargetEnterDataDirective   := 261
const CXCursor_OMPTargetExitDataDirective    := 262
const CXCursor_OMPTargetParallelDirective    := 263
const CXCursor_OMPTargetParallelForDirective := 264
const CXCursor_OMPTargetUpdateDirective      := 265
const CXCursor_OMPDistributeParallelForDirective := 266
const CXCursor_OMPDistributeParallelForSimdDirective := 267
const CXCursor_OMPDistributeSimdDirective := 268
const CXCursor_OMPTargetParallelForSimdDirective := 269
const CXCursor_OMPTargetSimdDirective := 270
const CXCursor_OMPTeamsDistributeDirective := 271
const CXCursor_OMPTeamsDistributeSimdDirective := 272
const CXCursor_OMPTeamsDistributeParallelForSimdDirective := 273
const CXCursor_OMPTeamsDistributeParallelForDirective := 274
const CXCursor_OMPTargetTeamsDirective := 275
const CXCursor_OMPTargetTeamsDistributeDirective := 276
const CXCursor_OMPTargetTeamsDistributeParallelForDirective := 277
const CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective := 278
const CXCursor_OMPTargetTeamsDistributeSimdDirective := 279
const CXCursor_LastStmt := CXCursor_OMPTargetTeamsDistributeSimdDirective
const CXCursor_TranslationUnit               := 300
const CXCursor_FirstAttr                     := 400
const CXCursor_UnexposedAttr                 := 400
const CXCursor_IBActionAttr                  := 401
const CXCursor_IBOutletAttr                  := 402
const CXCursor_IBOutletCollectionAttr        := 403
const CXCursor_CXXFinalAttr                  := 404
const CXCursor_CXXOverrideAttr               := 405
const CXCursor_AnnotateAttr                  := 406
const CXCursor_AsmLabelAttr                  := 407
const CXCursor_PackedAttr                    := 408
const CXCursor_PureAttr                      := 409
const CXCursor_ConstAttr                     := 410
const CXCursor_NoDuplicateAttr               := 411
const CXCursor_CUDAConstantAttr              := 412
const CXCursor_CUDADeviceAttr                := 413
const CXCursor_CUDAGlobalAttr                := 414
const CXCursor_CUDAHostAttr                  := 415
const CXCursor_CUDASharedAttr                := 416
const CXCursor_VisibilityAttr                := 417
const CXCursor_DLLExport                     := 418
const CXCursor_DLLImport                     := 419
const CXCursor_LastAttr                      := CXCursor_DLLImport
const CXCursor_PreprocessingDirective        := 500
const CXCursor_MacroDefinition               := 501
const CXCursor_MacroExpansion                := 502
const CXCursor_MacroInstantiation            := CXCursor_MacroExpansion
const CXCursor_InclusionDirective            := 503
const CXCursor_FirstPreprocessing            := CXCursor_PreprocessingDirective
const CXCursor_LastPreprocessing             := CXCursor_InclusionDirective
const CXCursor_ModuleImportDecl              := 600
const CXCursor_TypeAliasTemplateDecl         := 601
const CXCursor_StaticAssert                  := 602
const CXCursor_FriendDecl                    := 603
const CXCursor_FirstExtraDecl                := CXCursor_ModuleImportDecl
const CXCursor_LastExtraDecl                 := CXCursor_FriendDecl
const CXCursor_OverloadCandidate             := 700
const CXCursor_END_                          := 701

type CXPlatformAvailability {
    Platform    : CXString
    Introduced  : CXVersion
    Deprecated  : CXVersion
    Obsoleted   : CXVersion
    Unavailable : i32
    Message     : CXString
}

abstract type CXCursorSet { }

type CXType {
    kind : u32 # CXTypeKind
    data : void*[2]
}

const CXType_Invalid                    := 0
const CXType_Unexposed                  := 1
const CXType_Void                       := 2
const CXType_Bool                       := 3
const CXType_Char_U                     := 4
const CXType_UChar                      := 5
const CXType_Char16                     := 6
const CXType_Char32                     := 7
const CXType_UShort                     := 8
const CXType_UInt                       := 9
const CXType_ULong                      := 10
const CXType_ULongLong                  := 11
const CXType_UInt128                    := 12
const CXType_Char_S                     := 13
const CXType_SChar                      := 14
const CXType_WChar                      := 15
const CXType_Short                      := 16
const CXType_Int                        := 17
const CXType_Long                       := 18
const CXType_LongLong                   := 19
const CXType_Int128                     := 20
const CXType_Float                      := 21
const CXType_Double                     := 22
const CXType_LongDouble                 := 23
const CXType_NullPtr                    := 24
const CXType_Overload                   := 25
const CXType_Dependent                  := 26
const CXType_ObjCId                     := 27
const CXType_ObjCClass                  := 28
const CXType_ObjCSel                    := 29
const CXType_Float128                   := 30
const CXType_Half                       := 31
const CXType_FirstBuiltin               := CXType_Void
const CXType_LastBuiltin                := CXType_Half
const CXType_Complex                    := 100
const CXType_Pointer                    := 101
const CXType_BlockPointer               := 102
const CXType_LValueReference            := 103
const CXType_RValueReference            := 104
const CXType_Record                     := 105
const CXType_Enum                       := 106
const CXType_Typedef                    := 107
const CXType_ObjCInterface              := 108
const CXType_ObjCObjectPointer          := 109
const CXType_FunctionNoProto            := 110
const CXType_FunctionProto              := 111
const CXType_ConstantArray              := 112
const CXType_Vector                     := 113
const CXType_IncompleteArray            := 114
const CXType_VariableArray              := 115
const CXType_DependentSizedArray        := 116
const CXType_MemberPointer              := 117
const CXType_Auto                       := 118
const CXType_Elaborated                 := 119
const CXType_Pipe                       := 120
const CXType_OCLImage1dRO               := 121
const CXType_OCLImage1dArrayRO          := 122
const CXType_OCLImage1dBufferRO         := 123
const CXType_OCLImage2dRO               := 124
const CXType_OCLImage2dArrayRO          := 125
const CXType_OCLImage2dDepthRO          := 126
const CXType_OCLImage2dArrayDepthRO     := 127
const CXType_OCLImage2dMSAARO           := 128
const CXType_OCLImage2dArrayMSAARO      := 129
const CXType_OCLImage2dMSAADepthRO      := 130
const CXType_OCLImage2dArrayMSAADepthRO := 131
const CXType_OCLImage3dRO               := 132
const CXType_OCLImage1dWO               := 133
const CXType_OCLImage1dArrayWO          := 134
const CXType_OCLImage1dBufferWO         := 135
const CXType_OCLImage2dWO               := 136
const CXType_OCLImage2dArrayWO          := 137
const CXType_OCLImage2dDepthWO          := 138
const CXType_OCLImage2dArrayDepthWO     := 139
const CXType_OCLImage2dMSAAWO           := 140
const CXType_OCLImage2dArrayMSAAWO      := 141
const CXType_OCLImage2dMSAADepthWO      := 142
const CXType_OCLImage2dArrayMSAADepthWO := 143
const CXType_OCLImage3dWO               := 144
const CXType_OCLImage1dRW               := 145
const CXType_OCLImage1dArrayRW          := 146
const CXType_OCLImage1dBufferRW         := 147
const CXType_OCLImage2dRW               := 148
const CXType_OCLImage2dArrayRW          := 149
const CXType_OCLImage2dDepthRW          := 150
const CXType_OCLImage2dArrayDepthRW     := 151
const CXType_OCLImage2dMSAARW           := 152
const CXType_OCLImage2dArrayMSAARW      := 153
const CXType_OCLImage2dMSAADepthRW      := 154
const CXType_OCLImage2dArrayMSAADepthRW := 155
const CXType_OCLImage3dRW               := 156
const CXType_OCLSampler                 := 157
const CXType_OCLEvent                   := 158
const CXType_OCLQueue                   := 159
const CXType_OCLReserveID               := 160
const CXType_END_                       := 161

abstract type CXModule { }

type CXToken {
    int_data : u32[4]
    ptr_data : void*
}

abstract type CXCompletionString { }

type CXCompletionResult {
    CursorKind       : u32 # CXCursorKind
    CompletionString : CXCompletionString*
}

type CXCodeCompleteResults {
    Results    : CXCompletionResult*
    NumResults : u32
}

abstract type CXEvalResult { }

abstract type CXRemapping { }

type CXCursorAndRangeVisitor {
    context : void*
    visit : <(
        void*, #context
        CXCursor,
        CXSourceRange)
        : u32> # CXVisitorResult
}

abstract type CXIdxClientFile      { }
abstract type CXIdxClientEntity    { }
abstract type CXIdxClientContainer { }
abstract type CXIdxClientASTFile   { }

type CXIdxLoc {
    ptr_data : void*[2]
    int_data : u32
}

type CXIdxIncludedFileInfo {
    hasLoc         : CXIdxLoc
    filename       : char*
    file           : CXFile*
    isImport       : i32
    isAngled       : i32
    isModuleImport : i32
}

type CXIdxImportedASTFileInfo {
    file       : CXFile*
    module     : CXModule*
    loc        : CXIdxLoc
    isImplicit : i32
}

type CXIdxAttrInfo {
    kind   : u32 # CXIdxAttrKind
    cursor : CXCursor
    loc    : CXIdxLoc
}

type CXIdxEntityInfo {
    kind          : u32 # CXIdxEntityKind
    templateKind  : u32 # CXIdxEntityCXXTemplateKind
    lang          : u32 # CXIdxEntityLanguage
    name          : char*
    USR           : char*
    cursor        : CXCursor
    attributes    : char**
    numAttributes : u32
}

type CXIdxContainerInfo {
    cursor : CXCursor    
}

type CXIdxIBOutletCollectionAttrInfo {
    attrInfo    : CXIdxAttrInfo*
    objcClass   : CXIdxEntityInfo*
    classCursor : CXCursor
    classLoc    : CXIdxLoc
}

type CXIdxDeclInfo {
    entityInfo        : CXIdxEntityInfo*
    cursor            : CXCursor
    loc               : CXIdxLoc
    semanticContainer : CXIdxContainerInfo*
    lexicalContainer  : CXIdxContainerInfo*
    isRedeclaration   : i32
    isDefinition      : i32
    isContainer       : i32
    declAsContainer   : CXIdxContainerInfo*
    isImplicit        : i32
    attributes        : CXIdxAttrInfo**
    numAttributes     : u32
    flags             : u32
}

type CXIdxObjCContainerDeclInfo {
    declInfo : CXIdxDeclInfo*
    kind : u32 # CXIdxObjCContainerKind
}

type CXIdxBaseClassInfo {
    base   : CXIdxEntityInfo*
    cursor : CXCursor
    loc    : CXIdxLoc
} 

type CXIdxObjCProtocolRefInfo {
    protocol : CXIdxEntityInfo*
    cursor   : CXCursor
    loc      : CXIdxLoc
}

type CXIdxObjCProtocolRefListInfo {
    protocols    : CXIdxObjCProtocolRefInfo**
    numProtocols : u32
}

type CXIdxObjCInterfaceDeclInfo {
    containerInfo : CXIdxObjCContainerDeclInfo*
    superInfo     : CXIdxBaseClassInfo*
    protocols     : CXIdxObjCProtocolRefListInfo*
}

type CXIdxObjCCategoryDeclInfo {
    containerInfo : CXIdxObjCContainerDeclInfo*
    objcClass     : CXIdxEntityInfo*
    classCursor   : CXCursor
    classLoc      : CXIdxLoc
    protocols     : CXIdxObjCProtocolRefListInfo*
}

type CXIdxObjCPropertyDeclInfo {
    declInfo : CXIdxDeclInfo*
    getter   : CXIdxEntityInfo*
    setter   : CXIdxEntityInfo*
}

type CXIdxCXXClassDeclInfo {
    declInfo : CXIdxDeclInfo*
    bases    : CXIdxBaseClassInfo**
    numBases : u32
}

type CXIdxEntityRefInfo {
    kind             : u32 # CXIdxEntityRefKind
    cursor           : CXCursor
    loc              : CXIdxLoc
    referencedEntity : CXIdxEntityInfo*
    parentEntity     : CXIdxEntityInfo*
    container        : CXIdxContainerInfo*
}

type IndexerCallbacks {
    abortQuery : <(
        CXClientData*, # client_data
        void*)         # reserved
        : i32>

    diagnostic : <(
        CXClientData*, # client_data
        CXDiagnosticSet*,
        void*)>        # reserved

    enteredMainFile : <(
        CXClientData*, # client_data
        CXFile*,       # mainFile 
        void*)         # reserved
        : CXIdxClientFile*>

    ppIncludedFile : <(
        CXClientData*, # client_data
        CXIdxIncludedFileInfo*)
        : CXIdxClientFile*>

    importedASTFile : <(
        CXClientData*, # client_data
        CXIdxImportedASTFileInfo*)
        : CXIdxClientASTFile*>
        
    startedTranslationUnit : <(
        CXClientData*, # client_data
        void*)         # reserved
        : CXIdxClientContainer*>

    indexDeclaration : <(
        CXClientData*, # client_data
        CXIdxDeclInfo*)>
    
    indexEntityReference : <(
        CXClientData*, # client_data
        CXIdxEntityRefInfo*)>
}

abstract type CXIndexAction { }

type libclang {
    _lib_handle : void*

    # ---------------- symbols ----------------
    
    getCString : <(
        CXString)
        : char*>

    disposeString : <(
        CXString)>

    createIndex : <(
        i32,
        i32)
        : CXIndex*>
    
    createTranslationUnitFromSourceFile : <(
        CXIndex*,
        char*,
        i32,
        char**,
        u32,
        CXUnsavedFile**)
        : CXTranslationUnit*>
    
    parseTranslationUnit : <(
        CXIndex*,
        char*,
        char**,
        i32,
        CXUnsavedFile*,
        u32,
        u32)
        : CXTranslationUnit*> 

    parseTranslationUnit2 : <(
        CXIndex*,
        char*,
        char**,
        i32,
        CXUnsavedFile*,
        u32,
        u32,
        CXTranslationUnit**)
        : u32>

    getNumDiagnostics : <(
        CXTranslationUnit*)
        : u32>

    getDiagnostic : <(
        CXTranslationUnit*,
        u32)
        : CXDiagnostic*>

    formatDiagnostic : <(
        CXDiagnostic*,
        u32)
        : CXString>

    defaultDiagnosticDisplayOptions : <()
        : u32>

    getTranslationUnitCursor : <(
        CXTranslationUnit*)
        : CXCursor>

    visitChildren : <(
        CXCursor,
        <(  CXCursor,
            CXCursor,
            CXClientData*)
            : u32>,
        CXClientData*)
        : u32>

    getCursorSpelling : <(
        CXCursor)
        : CXString>

    Cursor_isNull : <(
        CXCursor)
        : i32>

    getCursorKindSpelling : <(
        u32)
        : CXString>

    Cursor_isVariadic : <(
        CXCursor)
        : u32>

    getCursorType : <(
        CXCursor)
        : CXType>

    # ------------- end symbols --------------
   
    proc _load(this, path : char*) {
        handle := dlopen(libclang_path, RTLD_LAZY)
        if handle.isnull()
            panic(dlerror())
        this._lib_handle = handle 
    }

    proc _handleGetSymbol(this, sym : char*) : void* {
        ptr := this._lib_handle.dlsym(sym)
        if ptr.isnull()
            panic(dlerror())
        return ptr
    }

    proc create(path : char*) : libclang {
        lib := { libclang: }
        lib._load(path)
        
        # load symbols
         lib.getCString = (lib._handleGetSymbol("clang_getCString"))
            as <(CXString) : char*>

        lib.disposeString = (lib._handleGetSymbol("clang_disposeString"))
            as <(CXString)>

        lib.createIndex = (lib._handleGetSymbol("clang_createIndex"))
                as <(i32, i32) : CXIndex*>

        lib.createTranslationUnitFromSourceFile = (lib._handleGetSymbol("clang_createTranslationUnitFromSourceFile"))
            as <(CXIndex*, char*, i32, char**, u32, CXUnsavedFile**) : CXTranslationUnit*>

        lib.parseTranslationUnit = (lib._handleGetSymbol("clang_parseTranslationUnit"))
            as <(CXIndex*, char*, char**, i32, CXUnsavedFile*, u32, u32) : CXTranslationUnit*>
        
        lib.parseTranslationUnit2 = (lib._handleGetSymbol("clang_parseTranslationUnit2"))
            as <(CXIndex*, char*, char**, i32, CXUnsavedFile*, u32, u32, CXTranslationUnit**) : u32> 
        
        lib.getNumDiagnostics = (lib._handleGetSymbol("clang_getNumDiagnostics"))
            as <(CXTranslationUnit*) : u32>

        lib.getDiagnostic = (lib._handleGetSymbol("clang_getDiagnostic"))
            as <(CXTranslationUnit*, u32) : CXDiagnostic*>


        lib.formatDiagnostic = (lib._handleGetSymbol("clang_formatDiagnostic"))
            as <(CXDiagnostic*, u32) : CXString>

        lib.defaultDiagnosticDisplayOptions = (lib._handleGetSymbol("clang_defaultDiagnosticDisplayOptions"))
            as <() : u32>

        lib.getTranslationUnitCursor = (lib._handleGetSymbol("clang_getTranslationUnitCursor"))
            as <(CXTranslationUnit*) : CXCursor>

        lib.visitChildren = (lib._handleGetSymbol("clang_visitChildren"))
            as <(   CXCursor,
                    <(  CXCursor,
                        CXCursor,
                        CXClientData*)
                        : u32>,
                    CXClientData*)
                    : u32>

        lib.getCursorSpelling = (lib._handleGetSymbol("clang_getCursorSpelling"))
            as <(CXCursor) : CXString>

        lib.Cursor_isNull = (lib._handleGetSymbol("clang_Cursor_isNull"))
            as <(CXCursor) : i32>

        lib.getCursorKindSpelling = (lib._handleGetSymbol("clang_getCursorKindSpelling"))
            as <(u32) : CXString>

        lib.Cursor_isVariadic = (lib._handleGetSymbol("clang_Cursor_isVariadic"))
            as <(CXCursor) : u32>

        lib.getCursorType = (lib._handleGetSymbol("clang_getCursorType"))
            as <(CXCursor) : CXType>

        return lib
    }

    proc close(this) {
        this._lib_handle.dlclose()     
    }
}
