# c2bjou
# source to source translator from C to bJou
# uses libclang

\run{ main() }

\ct {
import "null.bjou"

# must be defined for clang.bjou to compile
const libclang_path := "/usr/local/Cellar/llvm/5.0.1/lib/libclang.dylib"
import "clang.bjou"
import "ClangWrapper.bjou"
import "visitors.bjou"

import "compiler.bjou"


proc main() {
    init_clang()

    cw := ClangWrapper.create()
    translator := c2bJou.create(cw)

    translator.cw.parseTU("fact.c")

    translator.cw.traverseTU(dispatch, (&translator) as CXClientData*)

    # run passes on translated nodes
    gs := bjou_getGlobalScope()

    foreach node in translator.created
        bjou_addSymbols(node, gs)
    foreach node in translator.created {
        bjou_analyze(node)
        bjou_appendNode(node)
    }
}

type c2bJou {
    cw            : ClangWrapper ref
    visitor_table : visitor_t[...]
    indent        : int
    created       : ASTNode*[...]
    node_datas    : NodeData ref[...]

    proc create(cw : ClangWrapper ref) : c2bJou {
        c := { c2bJou:
            .cw = cw,
            .visitor_table = [...visitor_t],
            .indent = 0,
            .created = [...ASTNode*]
        }

        init_visitor_table(c.visitor_table)

        return c
    }
}
}
