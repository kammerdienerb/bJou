# test.bjou

main()

extern printf(char*, ...) : int
extern memcpy(void*, void*, u64) : void*

proc printf(i : int)           print "%", i
proc printf(f : float)         print "%", f
proc printf(t : (int, int))    print "(%, %)", t.0, t.1

proc p$T(t : T)                print "p$T()"

const F := 4.56
G := "G\n"

type V {
    d : f64
    t : T

    proc create(d : f64, t : T) : V    return { V: .d = d, .t = t }
}

type T {
    i : int
    v : V*

    proc create(i : i32, v : V*) : T    return { T: .i = i, .v = v }
    proc Print(this)                       print "{ .i = %, .v = some ref }", this.i
}

type U$T {
    field : T

    proc create(arg : T) : U$T    return { U$T: .field = arg }
    proc Print(this)              print "U.print()"
}

type Z$(T, U) {
    proc static(t : T, u : U) {
        print "t: %, u: %", t, u
    }
}

type TupleTemplate$(A, B, C) {
    tuple : (A, B, C)

    proc set_a(this, a : A)    this.tuple.0 = a
    proc set_b(this, b : B)    this.tuple.1 = b
    proc set_c(this, c : C)    this.tuple.2 = c

    proc Print(this)           print "(%, %, %)",
                                    this.tuple.0,
                                    this.tuple.1,
                                    this.tuple.2 
}

proc takesTuple$(A, B, C)(tup : (A, B, C)) {
    print "takesTuple: (%, %, %)",
            tup.0,
            tup.1,
            tup.2
}

proc takesTuplePtr$(A, B, C)(ptr : (A, B, C)*) {
    print "takesTuplePtr: @ptr = (%, %, %)",
            ptr.0,
            ptr.1,
            ptr.2
}

proc takesTupleTemplateRef$(A, B, C)(tt : TupleTemplate$(A, B, C) ref) : A {
    return tt.tuple.0
}

proc takesProc$(R)(p : <() : R>) : R    return p()
proc returnsString() : char*            return "Party like it's"
proc returnsInt() : i32                 return 1999
proc templateProc$T() : T               return 0 as T

proc main() {
    print "Testing new symbol system"
    var := "hello, world\n"
    printf(var)
    printf(F)
    printf(G)
    printf(123)
    printf((8, 9))
    # printf()
    p$int(123)
    p$i32(456)

    array := { 1, 2, 3, 4, 5 }
    foreach i in array {
        v := { V: }
        t := T.create(i * i, &v)
        t.Print()
    }

    u     := U.create('b')
    u'    := { U$char: .field = 'j' }
    u''   := U.create('o')
    u'''  := { U$char: .field = 'u' }
    
    v'    := { V: }
    u'''' := U.create(V.create(4.56, { T: .i = 0, .v = &v' }))
    u''''.Print()
    
    print "%", u
    print "%", u'
    print "%", u''
    print "%", u'''

    Z.static('j', 3.14159)

    tt := { TupleTemplate$(i32, f32, char): }
    tt.set_a(123)
    tt.set_b(4.56)
    tt.set_c('c')
    tt.Print()

    takesTuple(tt.tuple)
    takesTuple(("We", "Three", "Strings"))
    tup := ('p', 't', 'r')
    takesTuplePtr(&tup)
    print "takesTupleTemplateRef(): %", takesTupleTemplateRef(tt)
    print "% %", takesProc(returnsString), takesProc(returnsInt)
    print "%", takesProc(templateProc$float)
    # print "%", takesProc(templateProc)
    s := str("a new string")
    print "new string: '%'", s.c_str()

    dyn := [...f32]
    foreach i in array {
        dyn.push(i * -1.0)
        print "dyn has % items", |dyn|
    }

    foreach ref f in dyn    print "%", f
}
