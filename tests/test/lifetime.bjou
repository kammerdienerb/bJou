# lifetime.bjou

interface Foo {
    proc foo(this, f : float) : _*
}

abstract type S {
    implements idestroy 
    implements Foo
}

type T extends S {
    buf : char* # allocated memory
	f : float

    proc create() : T {
        print "Creating T"
        return { T: .buf = new char[1024] }
    }

    implements Foo {
        proc foo(this, f : float) : T* {
            print "T.Foo.foo() with f = %", f
			this.f = f
            return this 
        }
    }

    implements idestroy {
        proc destroy(this) {
            print "Destroying T with f = %", this.f
            delete this.buf
        }
    }
}

type U extends S {
	f : float

    implements idestroy {
        proc destroy(this) {
            print "Destroying U with f = %", this.f
        }
    }
    implements Foo {
        proc foo(this, f : float) : U* {
            print "U.Foo.foo() with f = %", f
			this.f = f
            return this
        }
    }
}

(proc main() {
    t := T.create()
    u := { U: }
    s_t := (&t) as S*
    s_u := (&u) as S*
    print "Lifetime"
    s_t.foo(1.23)
    s_u.foo(4.56)
})()
