# demo4.bjou
# Procedures

proc say_hello(name : char*)
    print "Hello, %!", name

const SAY_HELLO := say_hello

sh : <(char*)> = say_hello

say_hello("bJou")
SAY_HELLO("constants")
sh("variables")

proc add(a : int, b : int) : int
    return a + b

proc add(a : float, b : float) : float
    return a + b

print "add(1, 2) = %", add(1, 2)
print "add(1.23, 4.56) = %", add(1.23, 4.56)

addi : <(int, int) : int> = add
addf : <(float, float) : float> = add
# add_ := add

print "addi(3, 4) = %", addi(3, 4)
print "3.addi(4) = %", 3.addi(4)

factorial : <(int) : int> = proc (i : int) : int { print "placeholder" return 0 }
factorial = proc (i : int) : int {
    if i == 1
        return 1
    return i * factorial(i - 1)
}

f := 5
print "%! = %", f, factorial(f)

(proc repeat() print "This is repeated.")()

print "An anonymous procedure returned %", proc () : int {
    print "I'm anonymous and I return 12345."
    return 12345
}()

proc do_x_times(p : <()>, times : int) {
    if times > 0 {
        p()
        p.do_x_times(times - 1)
    }
}

repeat.do_x_times(5)

proc odd_or_even(input_proc : <() : int>) : <() : char*> {
    if input_proc() % 2 == 0
        return proc () : char* 
            return "input_proc() returned an even number."
    return proc () : char*
        return "input_proc() returned an odd number."
}

print "%", odd_or_even(proc () : int return 1)()
even := proc () : int return 2
print "%", odd_or_even(even)()

#$run(say_hello("compile time"))
