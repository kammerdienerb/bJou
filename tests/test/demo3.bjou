# demo3.bjou
# Defining Types

type LinkedListNode {
    data : float
    next : LinkedListNode*

    proc create(val : float) : LinkedListNode* {
        l := new LinkedListNode
        l.data = val
        return l
    }

    proc ignore() {}
}

type LinkedList {
    length : int
    front : LinkedListNode*
    back : LinkedListNode*

    proc create() : LinkedList
        return { LinkedList: .length = 0 }

    proc append(this, val : float) {
        if this.length == 0 {
            this.front = LinkedListNode.create(val)
            this.back = this.front
            this.length = 1
        } else {
            this.back.next = LinkedListNode.create(val)
            this.back = this.back.next
            this.length += 1
        }
    }

    proc printall(this, node : LinkedListNode*) {
        print "%", node.data
        if node != this.back this.printall(node.next)
    }

    proc printall(this)
        this.printall(this.front)
}

type Base {
    c : char
    message : char*
}

type Derived extends Base {
    num : int

    proc create(c : char, message : char*, num : int) : Derived
        return  { Derived: 
                    .c = c.(extern toupper(char) : char)(), 
                    .message = message, 
                    .num = num 
                }

    proc printall(this)
        print "{ %, %, % }", this.c, this.message, this.num
}

(proc main() {
    d := Derived.create('b', "derived type", 12345)
    d.printall()

    l := LinkedList.create()
    l.append(3.1415926536)
    l.append(234.42341)
    l.append(872.2465)
    l.printall()
})()
