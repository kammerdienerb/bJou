# run.bjou

extern sleep(u32) : u32
extern scanf(char*, ...) : u32

const DEMO := 3

$static_if { DEMO == 0
    $hello{}
}

$static_if { DEMO == 1
    $run{ a() }
}

$static_if { DEMO == 2
    $run{ b!(f32, i64)() }
}

$static_if { DEMO == 3
    $static_do { proc () {
        printf("compiled with bJou version %s\n",
            (extern bjou_getVersionString() : char*)())

        buff := new char[1024]
    
        printf("type some bJou code >>> ")

        scanf("%1023[^\t\n]s", buff)
        (extern bjou_parseAndAppend(char*))(buff)
    }}
}

type T!(U) {
    u : U

    proc create(arg : U) : T!(U) {
        print "creating a T"
        return { T!(U): .u = arg }
    }

    proc p(this)
        print ".u = %", this.u
}

proc a() {
    print "sleeping"
    sleep(3)
    t := T!(int).create(12345)
    t->p()
}

proc b!(U, V)() {
    $static_if { $same_type{U V}
        print "U == V"
    }
    $static_if { not $same_type{U V}
        print "U != V"
    }
}
