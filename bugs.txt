-- 'run' macro should call __bjou_rt_init or at least complete the same tasks before executing code

-- Need a better way to manage when macros are executed and when/if their children are analyzed
[
    static_if{ cond
        type T {} }
    static_if{ not cond
        type T {} }
]

-- should template define elements be checked against other symbols?
[
    type A {}
    type T$A { field : A }
]

-- with the new symbol system, we use Declarator::asString to create template proc symbols..
   This can cause duplication of code when the declarators used to instantiate a template are
   different names for the same type. There isn't a problem except for code bloat.
[
    proc p$T(t : T) {}
    p$int(1)
    p$i32(2)
]

-- expression blocks can cause code to be executed unexpectedly

-- cross-module template interaction can cause 'use of undeclared identifier' errors when
   the template parameter is expanded to a non-fully-qualified form

-- \static_if and 'using' statements don't exactly work..
