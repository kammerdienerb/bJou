# cli.bjou
# command line utilities

module cli

__cli_fg_buff : char[64]
__cli_bg_buff : char[64]

extern sprintf(char*, char* , ...) : i32
extern sscanf(char*, char* , ...) : i32

enum ArgKind {
    BASE,
    SWITCH,
    UNKNOWN_VAL,
    INT_VAL,
    FLOAT_VAL,
    STRING_VAL
}

abstract type Arg {
    short   : char
    long    : char*
    req     : bool
    set     : bool
    desc    : char*
    kind    : ArgKind

    parser  : ArgParser*

    proc free(this) {
        if this.long == NULL as char*
            delete this.long
        if this.desc == NULL as char*
            delete this.desc

        ArgValue$string
        if this.kind == ArgKind.STRING_VAL {
            ((&this) as ArgValue$string*).val.free()
        }
    }

    proc isSet(this) : bool
        return this.set

    proc required(this) : Arg ref {
        if this.kind == ArgKind.SWITCH
            \die{ "Switch args can't be required." }
        this.req = true
        return this
    }
       
    proc withDesc(this, desc : char*) : Arg ref {
        this.desc = cstrdup(desc)
        return this
    }

    proc help(this) : string {
        if this.kind == ArgKind.SWITCH {
            has_short := this.short != '\0'
            has_long  := this.long != NULL as char*

            s := str()
            if has_short {
                s = concat(s, str("-"), str(this.short))
                if has_long
                    s = concat(s, str(", --"), str(this.long))
            } else {
                s = concat(s, str("--"), str(this.long))
            }

            if this.desc != NULL as char*
                s = concat(s, str("\n    "), str(this.desc))

            return s
        } else if this.kind == ArgKind.INT_VAL {
            has_short := this.short != '\0'
            has_long  := this.long != NULL as char*

            s := str()
            if has_short {
                s = concat(s, str("-"), str(this.short), str(" <integer>"))
                if has_long
                    s = concat(s, str(", --"), str(this.long), str("=<integer>"))
            } else {
                s = concat(s, str("--"), str(this.long), str("=<integer>"))
            }

            if this.desc != NULL as char*
                s = concat(s, str("\n    "), str(this.desc))

            return s
        } else if this.kind == ArgKind.FLOAT_VAL {
            has_short := this.short != '\0'
            has_long  := this.long != NULL as char*

            s := str()
            if has_short {
                s = concat(s, str("-"), str(this.short), str(" <float>"))
                if has_long
                    s = concat(s, str(", --"), str(this.long), str("=<float>"))
            } else {
                s = concat(s, str("--"), str(this.long), str("=<float>"))
            }

            if this.desc != NULL as char*
                s = concat(s, str("\n    "), str(this.desc))

            return s
        } else if this.kind == ArgKind.STRING_VAL {
            has_short := this.short != '\0'
            has_long  := this.long != NULL as char*

            s := str()
            if has_short {
                s = concat(s, str("-"), str(this.short), str(" <string>"))
                if has_long
                    s = concat(s, str(", --"), str(this.long), str("=<string>"))
            } else {
                s = concat(s, str("--"), str(this.long), str("=<string>"))
            }

            if this.desc != NULL as char*
                s = concat(s, str("\n    "), str(this.desc))

            return s
        }

        \die{ "incomplete" }

        return str()
    }
}

type ArgSwitch extends Arg {
    proc create(parser : ArgParser ref) : ArgSwitch
        return { ArgSwitch:
            .kind   = ArgKind.SWITCH,
            .parser = &parser
        }
}

type ArgValue$T extends Arg {
    val : T

    proc create(parser : ArgParser ref) : ArgValue$T
        return { ArgValue$T:
            .kind   = ArgKind.UNKNOWN_VAL,
            .parser = &parser
        }
}

type ArgParser {
    prg      : char*
    all      : Arg*[...]
    switches : ArgSwitch*[...]
    val_args : Arg*[...]

    proc create(prg : char*) : ArgParser {
        return { ArgParser:
            .prg      = cstrdup(prg),
            .all      = [...Arg*],
            .switches = [...ArgSwitch*],
            .val_args = [...Arg*]
        }
    }

    proc free(this) {
        foreach arg in this.all {
            (@arg).free()
            delete arg
        }

        delete this.prg
    }

    proc _addSwitch(this, short : char, long : char*) : Arg ref {
        switch := new ArgSwitch
        @switch = ArgSwitch.create(this)

        switch.short = short
        has_long    := long != NULL as char*
        if has_long { switch.long = cstrdup(long) }
      
        this.all.push(switch)
        this.switches.push(switch)
        return @switch
    }

    proc addSwitch(this, short : char) : Arg ref {
        if short == '\0'
            \die{ "Can't use '\\0' for switch argument." }

        return this._addSwitch(short, NULL as char*)
    }

    proc addSwitch(this, long : char*) : Arg ref {
        if cstrlen(long) == 0
            \die{ "Empty long name for switch argument." }
        return this._addSwitch('\0', long)
    }
    
    proc addSwitch(this, short : char, long : char*) : Arg ref {
        if short == '\0'
            \die{ "Can't use '\\0' for switch argument." }
        if cstrlen(long) == 0
            \die{ "Empty long name for switch argument." }

        return this._addSwitch(short, long)
    }

    proc _addValue$T(this, short : char, long : char*) : Arg ref {
        arg := new ArgValue$T
        @arg = ArgValue$T.create(this)
        \static_if{ \same_type{ T i32 }
            arg.kind = ArgKind.INT_VAL }
        \static_if{ \same_type{ T f32 }
            arg.kind = ArgKind.FLOAT_VAL }
        \static_if{ \same_type{ T string }
            arg.kind = ArgKind.STRING_VAL }

        arg.short = short
        has_long := long != NULL as char*
        if has_long { arg.long = cstrdup(long) }
        
        this.all.push(arg)
        this.val_args.push(arg)
        return @arg
    }
    
    proc addValueInt(this, short : char) : Arg ref {
        if short == '\0'
            \die{ "Can't use '\\0' for value argument." }

        return this._addValue$i32(short, NULL as char*)
    }

    proc addValueInt(this, long : char*) : Arg ref {
        if cstrlen(long) == 0
            \die{ "Empty long name for value argument." }
        return this._addValue$i32('\0', long)
    }
    
    proc addValueInt(this, short : char, long : char*) : Arg ref {
        if short == '\0'
            \die{ "Can't use '\\0' for value argument." }
        if cstrlen(long) == 0
            \die{ "Empty long name for value argument." }

        return this._addValue$i32(short, long)
    }

    proc addValueFloat(this, short : char) : Arg ref {
        if short == '\0'
            \die{ "Can't use '\\0' for value argument." }

        return this._addValue$f32(short, NULL as char*)
    }

    proc addValueFloat(this, long : char*) : Arg ref {
        if cstrlen(long) == 0
            \die{ "Empty long name for value argument." }
        return this._addValue$f32('\0', long)
    }
    
    proc addValueFloat(this, short : char, long : char*) : Arg ref {
        if short == '\0'
            \die{ "Can't use '\\0' for value argument." }
        if cstrlen(long) == 0
            \die{ "Empty long name for value argument." }

        return this._addValue$f32(short, long)
    }

    proc addValueString(this, short : char) : Arg ref {
        if short == '\0'
            \die{ "Can't use '\\0' for value argument." }

        return this._addValue$string(short, NULL as char*)
    }

    proc addValueString(this, long : char*) : Arg ref {
        if cstrlen(long) == 0
            \die{ "Empty long name for value argument." }
        return this._addValue$string('\0', long)
    }
    
    proc addValueString(this, short : char, long : char*) : Arg ref {
        if short == '\0'
            \die{ "Can't use '\\0' for value argument." }
        if cstrlen(long) == 0
            \die{ "Empty long name for value argument." }

        return this._addValue$string(short, long)
    }

    proc usage(this) : string {
        u := concat(str("usage: "), str(this.prg), str(" "))

        if |this.switches| > 0 {
            u.append("[-")
            foreach sw in this.switches if sw.short
                u.append(sw.short)
            u.append(']')
        }
        foreach sw in this.switches if sw.short == '\0'
            u.append(concat(str(" [--"), str(sw.long), str("]")))
        foreach va in this.val_args {
            if va.short != '\0' {
                if va.req
                     u.append(str(" -"))
                else u.append(str(" [-"))

                u.append(va.short)
                if      va.kind == ArgKind.INT_VAL
                    u.append(str(" <int>"))
                else if va.kind == ArgKind.FLOAT_VAL
                    u.append(str(" <float>"))
                else if va.kind == ArgKind.STRING_VAL
                    u.append(str(" <string>"))

                if not va.req    u.append(']')
            } else {
                if va.req
                     u.append(str(" --"))
                else u.append(str(" [--"))

                u.append(va.long)
                if      va.kind == ArgKind.INT_VAL
                    u.append(str("=<int>"))
                else if va.kind == ArgKind.FLOAT_VAL
                    u.append(str("=<float>"))
                else if va.kind == ArgKind.STRING_VAL
                    u.append(str("=<string>"))

                if not va.req    u.append(']')
            }
        }

        return u 
    }

    proc help(this) : string {
        h := str("options:\n\n")

        foreach arg in this.all
            h = concat(h, (@arg).help(), str("\n"))

        return concat(this.usage(), str("\n\n"), h)
    }

    proc parse(this, argv: string[...] ref) : bool {
        foreach ref s in argv {
            if s.len() >= 2 {
                if s[0] == '-' {
                    if s[1] == '-' {
                        if s.len() == 2    { break }

                        s'       := str(s.c_str() + 2)
                        arg_name := { string: }
                        val_str  := { string: }
                        val_idx  := s'.find('=')
                        has_val  := false

                        if val_idx == -1 {
                            arg_name = s'.copy()
                        } else {
                            arg_name = s'.substr(0, val_idx)
                            val_str  = s'.substr(val_idx + 1)
                            has_val = true
                        }
                        s'.free()

                        success := false

                        if has_val {
                            success = this.handleLongVal(arg_name, val_str)
                        } else {
                            success = this.handleLong(arg_name)
                        }
                        
                        if has_val    val_str.free()
                        arg_name.free()

                        if not success
                            return false
                    } else if not this.parseShort(s) {
                        return false
                    }
                }
            } else {
                # @incomplete
            }
        }

        return true
    }

    proc parseShort(this, s: string ref) : bool {
        for c := 1; c < s.len(); c += 1 {
            found := false
            foreach ref arg in this.all {
                if arg.short == s[c] {
                    found   = true
                    arg.set = true
                    break
                }
            }
            if not found {
                this.report_ill_error(s[c])
                return false
            }
        }

        return true
    }
    
    proc handleLong(this, arg_name: string ref) : bool {
        found : (Arg* | none) = nothing
        foreach ref arg in this.all {
            if not arg.long.isnull() {
                if cstrcmp(arg.long, arg_name.c_str()) == 0 {
                    found   = arg
                    arg.set = true
                    break
                }
            }
        }

        if arg : Arg* = found {
            if arg.kind == ArgKind.INT_VAL
            or arg.kind == ArgKind.FLOAT_VAL
            or arg.kind == ArgKind.STRING_VAL {
                this.report_needs_val_error(arg_name.c_str())
                return false
            }
            return true 
        }
        
        this.report_ill_error(arg_name.c_str())
        return false
    }

    proc handleLongVal(this, arg_name: string ref, val_str: string ref) : bool {
        found : (Arg* | none) = nothing
        foreach ref arg in this.all {
            if not arg.long.isnull() {
                if cstrcmp(arg.long, arg_name.c_str()) == 0 {
                    found   = arg
                    arg.set = true
                    break
                }
            }
        }

        if arg : Arg* = found {
            if arg.kind == ArgKind.INT_VAL {
                i := 0
                sscanf(val_str.c_str(), "%d", &i)
                (arg as ArgValue$int*).val = i
            } else if arg.kind == ArgKind.FLOAT_VAL {
                f := 0.0
                sscanf(val_str.c_str(), "%f", &f)
                (arg as ArgValue$float*).val = f
            } else if arg.kind == ArgKind.STRING_VAL {
                (arg as ArgValue$string*).val = val_str.copy()
            } else {
                this.report_not_val_error(arg_name.c_str())
                return false
            }
            return true 
        }
        
        this.report_ill_error(arg_name.c_str())
        return false
    }

    proc report_ill_error(this, c: char) {
        print "illegal argument: '%'", c
    }
    proc report_ill_error(this, s: char*) {
        print "illegal argument: '%'", s
    }
    proc report_req_error(this, c: char) {
        print "argument required: '%'", c
    }
    proc report_req_error(this, s: char*) {
        print "argument required: '%'", s
    }
    proc report_not_val_error(this, c: char) {
        print "argument does not take a value: '%'", c
    }
    proc report_not_val_error(this, s: char*) {
        print "argument does not take a value: '%'", s
    }
    proc report_needs_val_error(this, c: char) {
        print "argument requires a value: '%'", c
    }
    proc report_needs_val_error(this, s: char*) {
        print "argument requires a value: '%'", s
    }
}

const RESET         := "\e[0m"
const BOLD          := "\e[1m"
const UNDERLINE     := "\e[4m"
const BLINK         := "\e[5m"
const INVERT        := "\e[7m"
const BOLD_OFF      := "\e[22m"
const UNDERLINE_OFF := "\e[24m"
const BLINK_OFF     := "\e[25m"
const INVERT_OFF    := "\e[27m"
const BLACK         := "\e[30m"
const RED           := "\e[31m"
const GREEN         := "\e[32m"
const YELLOW        := "\e[33m"
const BLUE          := "\e[34m"
const MAGENTA       := "\e[35m"
const CYAN          := "\e[36m"
const WHITE         := "\e[37m"
const BG_BLACK      := "\e[40m"
const BG_RED        := "\e[41m"
const BG_GREEN      := "\e[42m"
const BG_YELLOW     := "\e[43m"
const BG_BLUE       := "\e[44m"
const BG_MAGENTA    := "\e[45m"
const BG_CYAN       := "\e[46m"
const BG_WHITE      := "\e[47m"

proc fg256(val : u8) : char* {
    __cli_fg_buff.sprintf("\e[38;5;%dm", val)
    return __cli_fg_buff
}

proc bg256(val : u8) : char* {
    __cli_bg_buff.sprintf("\e[48;5;%dm", val)
    return __cli_bg_buff
}

proc fgRGB(r : u8, g : u8, b : u8) : char* {
    __cli_fg_buff.sprintf("\e[38;2;%d;%d;%dm", r, g, b)
    return __cli_fg_buff
}

proc bgRGB(r : u8, g : u8, b : u8) : char* {
    __cli_bg_buff.sprintf("\e[48;2;%d;%d;%dm", r, g, b)
    return __cli_bg_buff
}

proc sattr(s : string ref, attr : char*) : string ref
    return (s = concat(str(attr), s, str(RESET)))

proc sattr(s : string ref, attr1 : char*, attr2 : char*) : string ref
    return (s = concat(str(attr1), str(attr2), s, str(RESET)))
