# visitors.bjou

module c2bjou_visitors

import "clang.bjou"

type visitor_t = <(CXCursor,      # cursor
                   CXCursor,      # parent
                   CXClientData*) # client_data
                   : u32>

proc my_visitor(cursor      : CXCursor,
                parent      : CXCursor,
                client_data : CXClientData*) : u32 {

    data := client_data as c2bJou*

    name_cxstr := clang.getCursorSpelling(cursor)
    name_str := clang.getCString(name_cxstr)
    kind_cxstr := clang.getCursorKindSpelling(cursor.kind)
    kind_str := clang.getCString(kind_cxstr)

    for i := 0; i < data.indent; i += 1
        printf("  ")
    print "%: '%'", kind_str, name_str
   

    if cursor.kind == CXCursor_FunctionDecl {
        nullnode := _nullptr() as ASTNode*
        nullnodes := _nullptr() as ASTNode**
        nullstrings := _nullptr() as char**

        void_decl := bjou_createDeclarator(
                        bjou_createIdentifier("void"),
                        nullnode,
                        nullstrings, 0)

        arg_exprs : ASTNode*[1]
        statements : ASTNode*[1]

        extern sprintf(char*, char*, ...) : int
        my_str : char[256]
        my_str.sprintf("%s()\n", name_str)

        arg_exprs[0] = bjou_createStringLiteral(my_str)
        statements[0] = bjou_createCallExpression(
                            bjou_createIdentifier("printf"),
                            bjou_createArgList(
                                arg_exprs, 1))

        p := bjou_createProcedure(
                 name_str,
                 nullnodes, 0,
                 false,
                 void_decl,
                 statements, 1)

        call := bjou_createCallExpression(
                    bjou_createIdentifier(name_str),
                    bjou_createArgList(
                        nullnodes, 0))

        data.created.push(p)
        data.created.push(call)
    }

    data.indent += 1
    data.cw.traverse(cursor, my_visitor, client_data)
    data.indent -= 1

    return 1
}
