# visitors.bjou

module c2bjou_visitors

extern sprintf(char*, char*, ...) : int

import "clang.bjou"
import "compiler.bjou"

import "dltr.bjou"

type visitor_t = <(CXCursor,      # cursor
                   CXCursor,      # parent
                   CXClientData*) # client_data
                   : u32>

interface INodeDataBlock {
    proc addStatement(this, node : ASTNode*)
}

abstract type NodeData {
    cursorKind : u32

    implements INodeDataBlock {
        proc addStatement(this, node : ASTNode*) {
            buff : char[1024]
            kind_cxstr := clang.getCursorKindSpelling(this.cursorKind)
            kind_str := clang.getCString(kind_cxstr)
            buff.sprintf("c2bjou: addStatement() called for %s NodeData", kind_str)

            panic(buff)
        }
    }
}

proc init_visitor_table(table : visitor_t[CXCursor_END_]) {
    table.fill(|table|, v_unimplemented)

    table[CXCursor_FunctionDecl] = v_FunctionDecl
    table[CXCursor_ParmDecl]     = v_ParmDecl
}

proc getCursorName(cursor : CXCursor) : char* {
    name_cxstr := clang.getCursorSpelling(cursor)
    return clang.getCString(name_cxstr)
}

proc clangASTNodePrint(cursor : CXCursor, translator : c2bJou*) {
    name_str := cursor.getCursorName()
    kind_cxstr := clang.getCursorKindSpelling(cursor.kind)
    kind_str := clang.getCString(kind_cxstr)

    for i := 0; i < translator.indent; i += 1
        printf("  ")
    print "%: '%'", kind_str, name_str
}

proc v_unimplemented(cursor      : CXCursor,
                     parent      : CXCursor,
                     client_data : CXClientData*) : u32 {

    buff : char[1024]
    kind_cxstr := clang.getCursorKindSpelling(cursor.kind)
    kind_str := clang.getCString(kind_cxstr)

    buff.sprintf("c2bjou: missing visitor for %s", kind_str)

    panic(buff)

    return 0
}

type ProcNodeData extends NodeData {
    name : char*
    params : ASTNode*[...]
    isVararg : bool
    retDecl : ASTNode*
    statements : ASTNode*[...]

    implements INodeDataBlock {
        proc addStatement(this, node : ASTNode*)
            this.statements.push(node)
    }
}

proc v_FunctionDecl(cursor      : CXCursor,
                    parent      : CXCursor,
                    client_data : CXClientData*) : u32 {

    translator := client_data as c2bJou*

    my_data := alloc$ProcNodeData()
    my_data.cursorKind = cursor.kind

    my_data.name = cursor.getCursorName()
    my_data.isVararg = clang.Cursor_isVariadic(cursor) == 1

    translator.node_datas.push(&my_data)

    # visit children
    translator.indent += 1
    translator.cw.traverse(cursor, dispatch, client_data)
    translator.indent -= 1

    translator.node_datas.pop()
    
    p := bjou_createProcedure(
             my_data.name,
             my_data.params.data(), |my_data.params|,
             my_data.isVararg,
             my_data.retDecl,
             my_data.statements.data(), |my_data.statements|)

    my_data.dlloc()

    if |translator.node_datas| == 0
        translator.created.push(p)

    return 1
}

type VarDeclNodeData extends NodeData {
    name : char*
    typeDeclarator : ASTNode*
    initialization : ASTNode*
}

proc v_ParmDecl(cursor      : CXCursor,
                parent      : CXCursor,
                client_data : CXClientData*) : u32 {
    
    translator := client_data as c2bJou*

    my_data := alloc$VarDeclNodeData()
    my_data.cursorKind = cursor.kind

    my_data.name = cursor.getCursorName()
    my_data.typeDeclarator = (_nullptr() as ASTNode*)
    my_data.initialization = (_nullptr() as ASTNode*)

    translator.node_datas.push(&my_data)

    # visit children
    translator.indent += 1
    translator.cw.traverse(cursor, dispatch, client_data)
    translator.indent -= 1

    translator.node_datas.pop()

    p := bjou_createParamDeclaration(
        my_data.name,
        my_data.typeDeclarator,
        my_data.initialization)

    my_data.dlloc()

    if |translator.node_datas| == 0
        translator.created.push(p)

    return 1  
}

proc dispatch(cursor      : CXCursor,
              parent      : CXCursor,
              client_data : CXClientData*) : u32 {

    translator := client_data as c2bJou*

    cursor.clangASTNodePrint(translator)

    visitor := translator.visitor_table[cursor.kind]

    visitor(cursor, parent, client_data)

    return 1
}

proc tyToDecl(translator : c2bJou ref, t : CXType*) : ASTNode* {
    if translator.types.find(t).isnull()
        panic("halp")
    return translator.types[t]
}
